<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>GSK Survey Dashboard — Donut (Readable)</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.1/dist/chart.umd.min.js"></script>
  <style>
    :root{
      --bg:#0f1115; --card:#171a21; --line:#2a2f3a; --text:#f9fafb; --muted:#c7cdd6; --accent:#ef4444;
    }
    html,body{height:100%}
    body{ background: var(--bg); color: var(--text); font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, 'Helvetica Neue', Arial; }
    .card{ background: var(--card); border: 1px solid var(--line); border-radius: 14px; }
    .btn{ background: var(--accent); color: #fff; font-weight: 600; padding: .55rem .9rem; border-radius: .7rem; }
    .muted{ color: var(--muted) }
    #chartWrap{ position: relative; height: 360px; width: 100%; }
    #chartWrap canvas{ max-width: 100%; max-height: 100%; }
    th{ position: sticky; top:0; background: #1b1f27; }
  </style>
</head>
<body>
  <div class="max-w-6xl mx-auto p-6 space-y-6">
    <header class="flex flex-col gap-1 sm:flex-row sm:items-end sm:justify-between">
      <div>
        <h1 class="text-2xl font-semibold tracking-tight">GSK Survey Dashboard</h1>
        <p class="text-sm muted">Auto-loads from Google Sheets • Donut chart • High-contrast labels</p>
      </div>
      <div class="flex items-center gap-2">
        <button id="exportAggBtn" class="btn">Export CSV</button>
      </div>
    </header>

    <!-- KPIs -->
    <section class="grid grid-cols-1 sm:grid-cols-3 gap-4">
      <div class="card p-4">
        <p class="text-xs muted">Total Responses</p>
        <p id="kpiTotal" class="text-2xl font-bold mt-1">0</p>
      </div>
      <div class="card p-4">
        <p class="text-xs muted">Unique Suggestions</p>
        <p id="kpiUnique" class="text-2xl font-bold mt-1">0</p>
      </div>
      <div class="card p-4">
        <p class="text-xs muted">Top Suggestion</p>
        <p id="kpiTop" class="text-base font-medium mt-1 truncate">—</p>
      </div>
    </section>

    <!-- Donut + Filters -->
    <section class="grid grid-cols-1 lg:grid-cols-3 gap-4">
      <div class="card p-4 lg:col-span-2">
        <div class="flex items-center justify-between mb-3">
          <h2 class="text-sm font-semibold">Top Suggestions</h2>
          <div class="flex items-center gap-3 text-sm muted">
            <label for="topN">Top N</label>
            <input id="topN" type="range" min="3" max="20" value="10" class="w-40">
            <span id="topNLabel">10</span>
          </div>
        </div>
        <div id="chartWrap"><canvas id="donutChart" role="img" aria-label="Doughnut chart of top suggestions"></canvas></div>
      </div>
      <div class="card p-4 space-y-3">
        <h2 class="text-sm font-semibold">Filters</h2>
        <input id="searchInput" class="w-full bg-[#0e1116] border border-[color:var(--line)] text-[color:var(--text)] rounded-md px-3 py-2" placeholder="Search… (original or canonical)">
        <div class="grid grid-cols-2 gap-3">
          <label class="inline-flex items-center gap-2 text-sm"><input id="caseInsensitive" type="checkbox" checked> <span>Case‑insensitive</span></label>
          <label class="inline-flex items-center gap-2 text-sm"><input id="aggressiveNorm" type="checkbox" checked> <span>Normalize slang</span></label>
        </div>
        <div class="flex items-center gap-3 text-sm">
          <label for="fuzzyThreshold">Fuzzy merge</label>
          <input id="fuzzyThreshold" type="range" min="0" max="3" step="1" value="1" class="w-40">
          <span id="fuzzyLabel" class="muted">1</span>
        </div>
        <details class="text-sm muted">
          <summary>Custom dedup rules</summary>
          <textarea id="rulesInput" class="w-full bg-[#0e1116] border border-[color:var(--line)] text-[color:var(--text)] rounded-md px-3 py-2 mt-2" rows="4" placeholder="One per line: find => replace"></textarea>
          <button id="applyRulesBtn" class="btn mt-2" type="button">Apply</button>
        </details>
      </div>
    </section>

    <!-- Table -->
    <section class="card p-4">
      <div class="flex items-center justify-between mb-3">
        <h2 class="text-sm font-semibold">All Submissions</h2>
        <div id="tableMeta" class="text-xs muted">—</div>
      </div>
      <div class="overflow-x-auto rounded-md border border-[color:var(--line)]">
        <table class="min-w-full text-sm">
          <thead class="text-left">
            <tr class="text-xs muted">
              <th class="py-2 px-3">Timestamp</th>
              <th class="py-2 px-3">Original</th>
              <th class="py-2 px-3">Canonical</th>
              <th class="py-2 px-3">Count</th>
            </tr>
          </thead>
          <tbody id="tableBody" class="divide-y" style="--tw-divide-opacity:1; border-color: var(--line)"></tbody>
        </table>
      </div>
    </section>

    <p id="statusMsg" class="text-sm muted"></p>
  </div>

  <script>
    // Auto-load from this Google Sheet (baked in)
    const SHEET_URL = "https://docs.google.com/spreadsheets/d/1Fl7OKuWzVFrHfrY9yoWLoMC1Q0ZR4cR0hHndfcG6qZg/edit?usp=sharing";

    // ---------- State ----------
    const TZ = 'America/Costa_Rica';
    let rawRows = [];
    let grouped = [];
    let chartInstance = null;

    // ---------- Utils ----------
    const fmtTime = (d) => new Intl.DateTimeFormat('en-US', {
      timeZone: TZ, year:'numeric', month:'2-digit', day:'2-digit',
      hour:'2-digit', minute:'2-digit', second:'2-digit'
    }).format(d);

    function setStatus(msg, ok=true){
      const el = document.getElementById('statusMsg');
      el.textContent = msg;
      el.style.color = ok ? 'var(--muted)' : '#ff9aa2';
    }

    function extractSpreadsheetId(url){
      if(/^[A-Za-z0-9-_]{20,}$/.test(url)) return url; // ID
      const m = String(url||'').match(/\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/);
      return m ? m[1] : null;
    }
    function extractGid(url){
      const m = String(url||'').match(/[?&]gid=(\d+)/);
      return m ? m[1] : null;
    }
    function buildGvizUrl(sheetUrl){
      const id = extractSpreadsheetId(sheetUrl);
      const gid = extractGid(sheetUrl);
      if(!id) return null;
      let url = `https://docs.google.com/spreadsheets/d/${id}/gviz/tq?tqx=out:json`;
      if(gid) url += `&gid=${gid}`;
      return url;
    }

    function parseGvizJSON(text){
      const start = text.indexOf('{');
      const end = text.lastIndexOf('}');
      if(start === -1 || end === -1) throw new Error('Unexpected response');
      const json = JSON.parse(text.slice(start, end+1));
      const cols = json.table.cols.map(c => (c.label || c.id || '').trim());
      const rows = json.table.rows.map(r => r.c.map(c => c ? (c.f ?? c.v) : ''));
      return { cols, rows };
    }

    function detectColumns(cols){
      let tsIdx = cols.findIndex(c => /timestamp/i.test(c));
      let sugIdx = cols.findIndex(c => /(suggest|type)/i.test(c));
      if(tsIdx === -1) tsIdx = 0;
      if(sugIdx === -1) sugIdx = 1;
      return { tsIdx, sugIdx };
    }

    function parseDate(value){
      if(value == null) return null;
      if(typeof value === 'string'){
        const d = new Date(value);
        if(!isNaN(d)) return d;
        const m = value.match(/Date\(([^)]+)\)/);
        if(m){
          const parts = m[1].split(',').map(x => parseInt(x.trim(), 10) || 0);
          return new Date(parts[0], parts[1], parts[2]||1, parts[3]||0, parts[4]||0, parts[5]||0);
        }
        return null;
      }
      if(typeof value === 'number'){ return new Date(value); }
      return null;
    }

    function normalizeSuggestion(s, { caseInsensitive, aggressive }){
      if(!s) return '';
      let t = s.trim();
      if(caseInsensitive) t = t.toLowerCase();
      t = t.replace(/[^a-z0-9\s]/gi, ' ').replace(/\s+/g, ' ').trim();
      if(aggressive){
        t = t.replace(/\bkillas\b/g, 'killers')
             .replace(/\bkilla\b/g, 'killer')
             .replace(/\bghosts?\b/g, 'ghost')
             .replace(/\bseige\b/g, 'siege');
      }
      return t;
    }

    function levenshtein(a,b){
      const m=a.length, n=b.length;
      if(m===0) return n; if(n===0) return m;
      const dp = new Array(n+1);
      for(let j=0;j<=n;j++) dp[j]=j;
      for(let i=1;i<=m;i++){
        let prev=dp[0]; dp[0]=i;
        for(let j=1;j<=n;j++){
          const tmp=dp[j];
          dp[j]=Math.min(
            dp[j]+1,
            dp[j-1]+1,
            prev + (a[i-1]===b[j-1]?0:1)
          );
          prev=tmp;
        }
      }
      return dp[n];
    }

    function groupSuggestions(rows, opts, rules){
      const freqByKey = new Map();
      const displayForms = new Map();
      const keys = [];

      const compiledRules = (rules||[]).map(line => {
        const m = line.split('=>');
        if(m.length<2) return null;
        const find = m[0].trim(); const repl = m[1].trim();
        if(!find) return null;
        try{ return [new RegExp(find, 'gi'), repl]; }catch{ return null; }
      }).filter(Boolean);

      function applyRules(s){
        let out = s;
        for(const [re, rep] of compiledRules){ out = out.replace(re, rep); }
        return out;
      }

      function addToGroup(key, display){
        freqByKey.set(key, (freqByKey.get(key)||0)+1);
        if(!displayForms.has(key)) displayForms.set(key, new Map());
        const m = displayForms.get(key);
        m.set(display, (m.get(display)||0)+1);
      }

      function bestDisplayFor(key){
        const m = displayForms.get(key);
        let best = null, bestCount = -1;
        for(const [d,c] of m.entries()){
          if(c>bestCount || (c===bestCount && d<best)){ best = d; bestCount = c; }
        }
        return best || key;
      }

      for(const r of rows){
        const display = (r.suggestion||'').trim();
        let norm = normalizeSuggestion(display, opts);
        norm = applyRules(norm);
        if(!norm) continue;
        let chosen = null;
        for(const k of keys){
          const d = levenshtein(norm, k);
          if(d <= opts.fuzzy){ chosen = k; break; }
        }
        if(!chosen){ keys.push(norm); chosen = norm; }
        addToGroup(chosen, display);
      }

      const groups = keys.map(k => ({ key: k, label: bestDisplayFor(k), count: freqByKey.get(k) || 0 }))
                         .sort((a,b)=> b.count - a.count || a.label.localeCompare(b.label));
      return groups;
    }

    function renderStats(){
      document.getElementById('kpiTotal').textContent = rawRows.length.toString();
      document.getElementById('kpiUnique').textContent = grouped.length.toString();
      document.getElementById('kpiTop').textContent = grouped[0] ? `${grouped[0].label} (${grouped[0].count})` : '—';
    }

    function renderTable(filter=''){
      const body = document.getElementById('tableBody');
      body.innerHTML = '';
      const needle = filter.trim().toLowerCase();
      const mapCount = new Map(grouped.map(g=>[g.label, g.count]));
      for(const r of rawRows){
        const s = r.suggestion || '';
        const canonical = findGroupLabel(s);
        if(needle && !(s.toLowerCase().includes(needle) || canonical.toLowerCase().includes(needle))) continue;
        const tr = document.createElement('tr');
        tr.innerHTML = `<td class="py-2 px-3">${r.timestamp ? fmtTime(r.timestamp) : ''}</td>
                        <td class="py-2 px-3">${s}</td>
                        <td class="py-2 px-3">${canonical}</td>
                        <td class="py-2 px-3">${mapCount.get(canonical) ?? ''}</td>`;
        body.appendChild(tr);
      }
      document.getElementById('tableMeta').textContent = `${body.children.length} of ${rawRows.length} rows`;
    }

    function renderChart(){
      const topN = parseInt(document.getElementById('topN').value,10) || 10;
      document.getElementById('topNLabel').textContent = topN;
      const labels = grouped.slice(0, topN).map(g => g.label);
      const data = grouped.slice(0, topN).map(g => g.count);
      const ctx = document.getElementById('donutChart');
      if(chartInstance){ chartInstance.destroy(); }
      chartInstance = new Chart(ctx, {
        type: 'doughnut',
        data: { labels, datasets: [{ label: 'Votes', data }] },
        options: {
          responsive: true,
          maintainAspectRatio: false,
          cutout: '60%',
          animation: { duration: 250 },
          resizeDelay: 120,
          plugins: {
            legend: {
              position: 'bottom',
              labels: { color: '#ffffff', font: { size: 14, weight: 'bold' }, boxWidth: 14 }
            },
            tooltip: {
              enabled: true,
              backgroundColor: '#f9fafb',
              titleColor: '#111827',
              bodyColor: '#111827',
              borderColor: '#e5e7eb',
              borderWidth: 1,
              titleFont: { size: 14, weight: 'bold' },
              bodyFont: { size: 13 }
            }
          }
        }
      });
    }

    function currentOpts(){
      return {
        caseInsensitive: document.getElementById('caseInsensitive').checked,
        aggressive: document.getElementById('aggressiveNorm').checked,
        fuzzy: parseInt(document.getElementById('fuzzyThreshold').value,10) || 0
      };
    }
    function currentRules(){
      const raw = document.getElementById('rulesInput').value || '';
      return raw.split(/\r?\n/).map(s=>s.trim()).filter(Boolean);
    }

    function regroupAndRender(){
      grouped = groupSuggestions(rawRows, currentOpts(), currentRules());
      renderStats(); renderChart();
      renderTable(document.getElementById('searchInput').value||'');
    }

    function findGroupLabel(original){
      const norm = normalizeSuggestion(original, currentOpts());
      let bestLabel = ''; let bestDist = Infinity;
      for(const g of grouped){
        const d = levenshtein(norm, g.key);
        if(d < bestDist){ bestDist = d; bestLabel = g.label; }
      }
      return bestLabel || original;
    }

    async function loadFromSheet(sheetUrl){
      const gvizUrl = buildGvizUrl(sheetUrl);
      if(!gvizUrl){ setStatus('Invalid Google Sheet URL/ID.', false); return; }
      setStatus('Loading data…');
      try{
        const res = await fetch(gvizUrl, { mode:'cors', credentials:'omit' });
        if(!res.ok) throw new Error(`HTTP ${res.status}`);
        const text = await res.text();
        const { cols, rows } = parseGvizJSON(text);
        const { tsIdx, sugIdx } = detectColumns(cols);
        const parsed = [];
        for(const r of rows){
          const ts = parseDate(r[tsIdx]);
          const suggestion = (r[sugIdx] ?? '').toString();
          if(!suggestion) continue;
          parsed.push({ timestamp: ts, suggestion });
        }
        rawRows = parsed.sort((a,b)=> (a.timestamp?.getTime()||0) - (b.timestamp?.getTime()||0));
        regroupAndRender();
        setStatus(`Loaded ${rawRows.length} responses.`);
      }catch(err){
        console.error(err);
        setStatus('Could not load the sheet. Check sharing settings.', false);
        rawRows = [
          { timestamp: new Date('2025-08-26T12:57:37'), suggestion: 'Ghost Siege Killers' },
          { timestamp: new Date('2025-08-26T12:59:15'), suggestion: 'Ghost Siege Killas' }
        ];
        regroupAndRender();
      }
    }

    function downloadAggregatedCSV(){
      const header = ['Group','Count'];
      const rows = [header.join(',')];
      for(const g of grouped){
        rows.push(`"${g.label.replaceAll('"','""')}",${g.count}`);
      }
      const blob = new Blob([rows.join('\n')], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a'); a.href=url; a.download='gsk-aggregated.csv';
      document.body.appendChild(a); a.click(); a.remove();
      URL.revokeObjectURL(url);
    }

    // ---------- Events ----------
    document.getElementById('exportAggBtn').addEventListener('click', downloadAggregatedCSV);
    document.getElementById('searchInput').addEventListener('input', (e)=> renderTable(e.target.value));
    document.getElementById('topN').addEventListener('input', (e)=>{ document.getElementById('topNLabel').textContent = e.target.value; renderChart(); });
    document.getElementById('fuzzyThreshold').addEventListener('input', (e)=>{ document.getElementById('fuzzyLabel').textContent = e.target.value; regroupAndRender(); });
    document.getElementById('caseInsensitive').addEventListener('change', regroupAndRender);
    document.getElementById('aggressiveNorm').addEventListener('change', regroupAndRender);
    document.getElementById('applyRulesBtn').addEventListener('click', regroupAndRender);

    // ---------- Init: auto-load ----------
    window.addEventListener('DOMContentLoaded', ()=> loadFromSheet(SHEET_URL));
  </script>
</body>
</html>
