<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>GSK Survey Dashboard</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    /* Simple fade-in */
    [data-fade] { opacity: 0; transform: translateY(6px); transition: opacity .35s, transform .35s; }
    [data-fade].in { opacity: 1; transform: translateY(0); }
  </style>
</head>
<body class="bg-slate-50 text-slate-800">
  <div class="max-w-7xl mx-auto p-6 space-y-6">
    <!-- Header -->
    <header class="flex flex-col gap-3 sm:flex-row sm:items-end sm:justify-between" data-fade>
      <div>
        <h1 class="text-2xl font-bold tracking-tight">GSK Survey Dashboard</h1>
        <p class="text-sm text-slate-600">Live summary of name suggestions for <span class="font-semibold">GSK</span> (Spot Killers).</p>
      </div>
      <div class="flex flex-wrap gap-2">
        <a id="sourceLink" href="#" target="_blank" class="text-xs px-3 py-2 rounded-xl bg-white shadow border border-slate-200 hover:bg-slate-50">Open Source Sheet</a>
        <button id="exportAggBtn" class="text-xs px-3 py-2 rounded-xl bg-white shadow border border-slate-200 hover:bg-slate-50">Export Aggregated CSV</button>
      </div>
    </header>

    <!-- Controls -->
    <section class="bg-white shadow-sm border border-slate-200 rounded-2xl p-4 sm:p-5 space-y-3" data-fade>
      <div class="flex flex-col md:flex-row md:items-end gap-3">
        <label class="flex-1">
          <span class="block text-xs font-medium text-slate-600">Google Sheet URL or ID</span>
          <input id="sheetInput" class="w-full mt-1 rounded-xl border border-slate-300 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" placeholder="Paste Google Sheet URL or ID" />
        </label>
        <div class="flex gap-2">
          <button id="loadBtn" class="px-4 py-2 rounded-xl bg-indigo-600 text-white text-sm font-medium hover:bg-indigo-700">Load</button>
          <button id="loadSampleBtn" class="px-4 py-2 rounded-xl bg-slate-900 text-white text-sm font-medium hover:bg-black">Load Sample</button>
        </div>
      </div>
      <p class="text-[13px] text-slate-500">Tip: make sure your sheet is viewable to "Anyone with the link". This page fetches via Google Visualization JSON (<code>gviz</code>). If loading fails, use <em>Load Sample</em>.</p>
    </section>

    <!-- KPIs -->
    <section class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4" data-fade>
      <div class="bg-white rounded-2xl border border-slate-200 p-4 shadow-sm">
        <p class="text-xs text-slate-500">Total Submissions</p>
        <p id="kpiTotal" class="text-2xl font-semibold mt-1">—</p>
      </div>
      <div class="bg-white rounded-2xl border border-slate-200 p-4 shadow-sm">
        <p class="text-xs text-slate-500">Unique (Canonical)</p>
        <p id="kpiUnique" class="text-2xl font-semibold mt-1">—</p>
      </div>
      <div class="bg-white rounded-2xl border border-slate-200 p-4 shadow-sm">
        <p class="text-xs text-slate-500">Top Suggestion</p>
        <p id="kpiTop" class="text-base font-semibold mt-1 truncate">—</p>
      </div>
      <div class="bg-white rounded-2xl border border-slate-200 p-4 shadow-sm">
        <p class="text-xs text-slate-500">Last Updated</p>
        <p id="kpiUpdated" class="text-sm font-medium mt-1">—</p>
      </div>
    </section>

    <!-- Chart & Filters -->
    <section class="grid grid-cols-1 lg:grid-cols-3 gap-4" data-fade>
      <div class="bg-white rounded-2xl border border-slate-200 p-4 shadow-sm lg:col-span-2">
        <div class="flex items-center justify-between mb-3">
          <h2 class="text-sm font-semibold">Top Suggestions</h2>
          <div class="text-[12px] text-slate-500">Top 10 by canonical grouping</div>
        </div>
        <canvas id="barChart" height="120"></canvas>
      </div>
      <div class="bg-white rounded-2xl border border-slate-200 p-4 shadow-sm space-y-3">
        <h2 class="text-sm font-semibold">Filters</h2>
        <label class="block">
          <span class="block text-xs text-slate-600">Search (original or canonical)</span>
          <input id="searchInput" class="w-full mt-1 rounded-xl border border-slate-300 px-3 py-2 text-sm focus:outline-none focus:ring-2 focus:ring-indigo-500" placeholder="e.g., ghost, siege, killer" />
        </label>
        <label class="block">
          <span class="block text-xs text-slate-600">Dedup Rules (applied to canonical)</span>
          <textarea id="rulesInput" class="w-full mt-1 rounded-xl border border-slate-300 px-3 py-2 text-xs h-28 focus:outline-none focus:ring-2 focus:ring-indigo-500" placeholder='One rule per line, format: find => replace\nExample:\nkillas => killers\nreapers => reaper'></textarea>
          <p class="mt-1 text-[11px] text-slate-500">These replacements run after basic normalization (lowercase, punctuation/extra spaces removed).</p>
        </label>
        <button id="applyRulesBtn" class="px-3 py-2 rounded-xl bg-emerald-600 text-white text-xs font-medium hover:bg-emerald-700">Apply Rules</button>
      </div>
    </section>

    <!-- Table -->
    <section class="bg-white rounded-2xl border border-slate-200 p-4 shadow-sm" data-fade>
      <div class="flex items-center justify-between mb-3">
        <h2 class="text-sm font-semibold">All Submissions</h2>
        <div class="text-[12px] text-slate-500" id="tableMeta">—</div>
      </div>
      <div class="overflow-x-auto">
        <table class="min-w-full text-sm">
          <thead class="bg-slate-100/60 text-slate-600">
            <tr>
              <th class="text-left py-2 px-3 font-medium">Timestamp</th>
              <th class="text-left py-2 px-3 font-medium">Original Suggestion</th>
              <th class="text-left py-2 px-3 font-medium">Canonical</th>
              <th class="text-left py-2 px-3 font-medium">Group Count</th>
            </tr>
          </thead>
          <tbody id="tableBody" class="divide-y divide-slate-100"></tbody>
        </table>
      </div>
    </section>
  </div>

  <script>
    // ===== Config =====
    const DEFAULT_SHEET_URL = 'https://docs.google.com/spreadsheets/d/1Fl7OKuWzVFrHfrY9yoWLoMC1Q0ZR4cR0hHndfcG6qZg/edit?usp=sharing';

    // Sample data (your two rows)
    const SAMPLE_ROWS = [
      { timestamp: '2025-08-26 12:57:37', suggestion: 'Ghost Siege Killers' },
      { timestamp: '2025-08-26 12:59:15', suggestion: 'Ghost Siege Killas' },
    ];

    // ===== State =====
    let rawRows = []; // {timestamp: Date, suggestion: string}
    let canonicalMap = new Map(); // canonical => {count, examples: Set, rows: [idx...]}
    let chart;

    // ===== Helpers =====
    function fadeIn() {
      document.querySelectorAll('[data-fade]').forEach(el => requestAnimationFrame(() => el.classList.add('in')));
    }

    function parseSheetId(urlOrId) {
      if (!urlOrId) return null;
      const m = String(urlOrId).match(/\/spreadsheets\/d\/([a-zA-Z0-9-_]+)/);
      return m ? m[1] : urlOrId.trim();
    }

    function gvizUrl(id) {
      // Use gviz (JSON) because it's typically CORS-friendly.
      // We request the whole first sheet by default.
      return `https://docs.google.com/spreadsheets/d/${id}/gviz/tq?tqx=out:json`;
    }

    function parseGvizResponse(txt) {
      // gviz wraps JSON like: /*O_o*/\ngoogle.visualization.Query.setResponse({...});
      const start = txt.indexOf('{');
      const end = txt.lastIndexOf('}');
      if (start === -1 || end === -1) throw new Error('Unexpected gviz payload');
      return JSON.parse(txt.slice(start, end + 1));
    }

    function parseGvizDate(v) {
      if (v == null) return null;
      if (typeof v === 'string') {
        // gviz often returns e.g. "Date(2025,7,26,12,57,37)" (month is 0-based)
        const m = v.match(/^Date\(([-0-9,\s]+)\)$/);
        if (m) {
          const parts = m[1].split(',').map(n => parseInt(n.trim(), 10));
          return new Date(parts[0], parts[1] || 0, parts[2] || 1, parts[3] || 0, parts[4] || 0, parts[5] || 0);
        }
        // Fall back to parsing plain string
        const d = new Date(v.replace('T', ' '));
        return isNaN(d) ? null : d;
      }
      if (typeof v === 'number') {
        const d = new Date(v);
        return isNaN(d) ? null : d;
      }
      // Sometimes gviz may give {v: ..., f: ...} upstream already handled; return null otherwise
      return null;
    }

    function fmtDate(d) {
      if (!d) return '—';
      const pad = n => String(n).padStart(2, '0');
      return `${d.getFullYear()}-${pad(d.getMonth()+1)}-${pad(d.getDate())} ${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
    }

    function basicNormalize(s) {
      return s
        .toLowerCase()
        .normalize('NFKD')
        .replace(/[\u0300-\u036f]/g, '')              // strip diacritics
        .replace(/[^a-z0-9\s]/g, ' ')                  // keep letters/numbers/spaces
        .replace(/\s+/g, ' ')                           // compress spaces
        .trim();
    }

    function applyCustomRules(s, rules) {
      let out = s;
      for (const [find, repl] of rules) {
        if (!find) continue;
        const esc = find.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
        out = out.replace(new RegExp(`\\b${esc}\\b`, 'g'), repl);
      }
      return out;
    }

    function canonicalize(s, rules) {
      let c = basicNormalize(s);
      // Built-in gentle tweaks for typical variants
      c = c.replace(/\bkilla[s]?\b/g, 'killer');
      c = c.replace(/\bkillers\b/g, 'killer'); // singular for grouping
      c = c.replace(/\bghosts\b/g, 'ghost');
      c = c.replace(/\bskulls\b/g, 'skull');
      c = applyCustomRules(c, rules);
      return c;
    }

    function aggregate(rows, rules=[]) {
      const map = new Map();
      rows.forEach((r, idx) => {
        const canonical = canonicalize(r.suggestion, rules);
        const rec = map.get(canonical) || { count: 0, examples: new Set(), rows: [] };
        rec.count += 1;
        rec.examples.add(r.suggestion);
        rec.rows.push(idx);
        map.set(canonical, rec);
      });
      return map;
    }

    function renderKPIs() {
      const kpiTotal = document.getElementById('kpiTotal');
      const kpiUnique = document.getElementById('kpiUnique');
      const kpiTop = document.getElementById('kpiTop');
      const kpiUpdated = document.getElementById('kpiUpdated');

      const total = rawRows.length;
      const unique = canonicalMap.size;
      const sorted = [...canonicalMap.entries()].sort((a,b) => b[1].count - a[1].count);
      const top = sorted[0] ? `${capitalize(sorted[0][0])} (${sorted[0][1].count})` : '—';
      const last = rawRows.length ? rawRows.reduce((a,b) => (a.timestamp > b.timestamp ? a : b)).timestamp : null;

      kpiTotal.textContent = total;
      kpiUnique.textContent = unique;
      kpiTop.textContent = top;
      kpiUpdated.textContent = last ? fmtDate(last) : '—';
    }

    function capitalize(s) { return s ? s.charAt(0).toUpperCase() + s.slice(1) : s; }

    function renderChart() {
      const ctx = document.getElementById('barChart');
      const top10 = [...canonicalMap.entries()]
        .sort((a,b) => b[1].count - a[1].count)
        .slice(0, 10);
      const labels = top10.map(([k]) => capitalize(k));
      const data = top10.map(([,v]) => v.count);

      if (chart) chart.destroy();
      chart = new Chart(ctx, {
        type: 'bar',
        data: {
          labels,
          datasets: [{
            label: 'Count',
            data,
            borderWidth: 1
          }]
        },
        options: {
          responsive: true,
          scales: { y: { beginAtZero: true, ticks: { precision: 0 } } },
          plugins: { legend: { display: false } }
        }
      });
    }

    function renderTable(filter='') {
      const tbody = document.getElementById('tableBody');
      const meta = document.getElementById('tableMeta');
      tbody.innerHTML = '';

      const filterNorm = basicNormalize(filter);

      // Build quick lookup for counts
      const counts = new Map();
      for (const [k, v] of canonicalMap.entries()) counts.set(k, v.count);

      const rows = rawRows
        .map(r => ({
          ...r,
          canonical: canonicalize(r.suggestion, currentRules()),
          count: counts.get(canonicalize(r.suggestion, currentRules())) || 1,
        }))
        .filter(r => !filterNorm || basicNormalize(r.suggestion).includes(filterNorm) || basicNormalize(r.canonical).includes(filterNorm))
        .sort((a,b) => b.timestamp - a.timestamp);

      rows.forEach(r => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td class="py-2 px-3 whitespace-nowrap">${fmtDate(r.timestamp)}</td>
          <td class="py-2 px-3">${escapeHtml(r.suggestion)}</td>
          <td class="py-2 px-3 text-slate-700">${escapeHtml(r.canonical)}</td>
          <td class="py-2 px-3">${r.count}</td>
        `;
        tbody.appendChild(tr);
      });

      meta.textContent = `${rows.length} rows shown`;
    }

    function escapeHtml(s) {
      return String(s)
        .replaceAll('&','&amp;')
        .replaceAll('<','&lt;')
        .replaceAll('>','&gt;')
        .replaceAll('"','&quot;')
        .replaceAll("'",'&#39;');
    }

    function currentRules() {
      const lines = (document.getElementById('rulesInput').value || '').split(/\n+/);
      const pairs = [];
      for (const line of lines) {
        const m = line.split(/\s*=>\s*/);
        if (m.length === 2) pairs.push([basicNormalize(m[0]), basicNormalize(m[1])]);
      }
      return pairs;
    }

    function recalcAndRender() {
      canonicalMap = aggregate(rawRows, currentRules());
      renderKPIs();
      renderChart();
      renderTable(document.getElementById('searchInput').value || '');
    }

    async function loadFromSheet(urlOrId) {
      const id = parseSheetId(urlOrId);
      if (!id) throw new Error('Missing sheet ID/URL');
      const url = gvizUrl(id);
      document.getElementById('sourceLink').href = `https://docs.google.com/spreadsheets/d/${id}/edit`;

      const res = await fetch(url);
      if (!res.ok) throw new Error(`Fetch failed (${res.status})`);
      const txt = await res.text();
      const data = parseGvizResponse(txt);

      const rows = (data.table && data.table.rows) || [];
      // Expect first col = Timestamp, second col = Suggestion
      rawRows = rows
        .map(r => ({
          timestamp: parseGvizDate(r.c?.[0]?.v) || new Date(),
          suggestion: String(r.c?.[1]?.v ?? '').trim()
        }))
        .filter(r => r.suggestion);

      recalcAndRender();
    }

    function loadSample() {
      rawRows = SAMPLE_ROWS.map(r => ({ timestamp: new Date(r.timestamp.replace('T',' ')), suggestion: r.suggestion }));
      recalcAndRender();
    }

    function exportAggregatedCSV() {
      const rows = [...canonicalMap.entries()] // [canonical, {count, examples}]
        .sort((a,b) => b[1].count - a[1].count)
        .map(([canon, info]) => ({
          canonical: canon,
          count: info.count,
          examples: [...info.examples].join(' | ')
        }));

      const header = 'canonical,count,examples\n';
      const csv = header + rows.map(r => [
        '"' + r.canonical.replaceAll('"','""') + '"',
        r.count,
        '"' + r.examples.replaceAll('"','""') + '"'
      ].join(',')).join('\n');

      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = 'gsk_aggregated.csv';
      a.click();
      URL.revokeObjectURL(url);
    }

    // ===== Events =====
    document.getElementById('loadBtn').addEventListener('click', () => loadFromSheet(document.getElementById('sheetInput').value).catch(err => alert(err.message)));
    document.getElementById('loadSampleBtn').addEventListener('click', loadSample);
    document.getElementById('exportAggBtn').addEventListener('click', exportAggregatedCSV);
    document.getElementById('searchInput').addEventListener('input', (e) => renderTable(e.target.value));
    document.getElementById('applyRulesBtn').addEventListener('click', recalcAndRender);

    // ===== Init =====
    (function init() {
      fadeIn();
      const input = document.getElementById('sheetInput');
      input.value = DEFAULT_SHEET_URL;
      document.getElementById('sourceLink').href = DEFAULT_SHEET_URL;
      // Try to auto-load from the provided URL; if it fails, keep the UI ready and sample available.
      loadFromSheet(DEFAULT_SHEET_URL).catch(() => {/* user can press Load Sample */});
    })();
  </script>
</body>
</html>
